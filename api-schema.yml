openapi: 3.0.3
info:
  title: Akcess - Rest documentation 0.1.0
  description: |-
    
    This documentation describes an API REST designed to manage authentication and access rights for a collection of applications.
    Akcess is a robust security solution designed to serve as a secure proxy and authentication gateway for your applications. It provides a layer of protection for your resources, ensuring secure and controlled access to your services.
    ## Manager
    A 'manager' represents an entity capable of overseeing the Akcess server instance. A manager is created at the beginning of this instance and can subsequently enable the creation of others with varying degrees of permissions.
    
    ## Application
    An application represent the software you want to link Akcess to, an application can manage its users that can access to it and the role the users can wear.
    ## Users
    Each user possesses a peer of username/password to login into an application, with each user exclusively associated with a single application. Akcess centrally manages all users in one location. A user cannot login to another application.
    ## Roles
    Roles define the access rights of a user within an application. A role cannot be use by another application.
    
    
    This Api can ask for a more global API of Pentagon to retrieves somes datas about this server instance.

  termsOfService: http://swagger.io/terms/
  version: 0.1.0
externalDocs:
  description: Find out more about Akcess
  url: http://swagger.io
servers:
  - url: http://localhost:8080/api/
tags:
  - name: Manager
    description: Entity which has the rights to perform all actions over the Akcess instance.
  - name: Application
    description: Use as a container of its users and roles across the Akcess instance.
  - name: User
    description: Entity subscribed to a registered application
  - name: info
    description: Global data of the current Akcess server
  - name: Role
    description: Role aims to identify the application's users.
paths:
  /v1/applications:
    get:
      tags:
        - Application
      summary: Get all the registered applications
      description: Get the applications in the akcess server matching the filter key, if no key is given then get all the applications.
      parameters:
        - name: applicationName
          in: query
          description: Filter applications by a specific criterion
          required: false
          schema:
            type: string
          style: form
          explode: false
      operationId: listApplication
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application_light'
      security:
        - bearer: []
    post:
      tags:
        - Application
      summary: Add a new application
      description: Add a new application to your applications
      operationId: addApplication
      requestBody:
        description: Create a new application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application_post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application_light'
        '400':
          description: Invalid input
      security:
        - bearer: []
  /v1/applications/{applicationId}:
    get:
      tags:
        - Application
      summary: Find application by ID
      description: Returns informations of an application
      operationId: getApplicationById
      parameters:
        - name: applicationId
          in: path
          description: ID of application to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application_full'
        '404':
          description: Application not found
      security:
        - bearer: []
    delete:
      tags:
        - Application
      summary: Deletes an application
      description: Deletes an application
      operationId: deleteApplication
      parameters:
        - name: applicationId
          in: path
          description: Application id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description : Application sucessfully deleted
        '404':
          description: Application not found
      security:
        - bearer: []
    patch:
      tags:
        - Application
      summary: Update an existing application
      description: Update an existing application by Id
      operationId: updateApplication
      parameters:
        - name: applicationId
          in: path
          description: ID of application to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent application
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application_patch'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application_light'
        '400':
          description: Invalid ID supplied
        '404':
          description: Application not found
        '405':
          description: Validation exception
      security:
        - bearer: []
  /v1/applications/{applicationId}/users:
    get:
      tags:
        - Application
      summary: Get the list of the given application's users
      parameters:
        - name: applicationId
          in: path
          description: Application Id to registered the user in
          schema:
            type: integer
            format: int64
          required: true
        - name: username
          in: query
          description: Username of the user searched
          schema:
            type: string
      responses:
        '400':
          description: The given password or username is blank, empty or null.
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOutput'
      security:
        - bearer: []
  /v1/users/{applicationId}:
    post:
      tags:
        - User
      summary: Register a User into a registered Application
      parameters:
        - name: applicationId
          in: path
          description: Application Id to registered the user in
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Credentials to register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User has successfully been created.
        '400':
          description: The given password or username is blank, empty or null.
        '404':
          description: The applicationId does not exists
      security:
        - bearer: []
  /v1/users/application/{applicationId}/auth:
    post:
      tags:
        - User
      summary: Check if user has acces to an application
      requestBody:
        description: Check if user has acces to an application by providing the application ID, username and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      parameters:
        - name: applicationId
          in: path
          description: Application Id to registered the user in
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The user is recognize registered into the given application
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenRedirection'
        '400':
          description: The given password or username or application ID is blank, empty or null.
        '404':
          description: the given applicationId has not been find
      security:
        - bearer: []
  /v1/users/{userID}:
    delete:
      tags:
        - User
      summary: Deletes credendials of an user
      description: Deletes credendials of an user
      operationId: deleteUser
      parameters:
        - name: userID
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid application value
        '200' :
          description: User successfully deleted
        '404':
          description: The user does not exists
      security:
        - bearer: []
    patch:
      tags:
        - User
      summary: Update a registered crendential
      requestBody:
        description: Credential to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserInput'
      parameters:
        - name: userID
          in: path
          description: Id of the user to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: The given password or username is blank, empty or null.
      security:
        - bearer: []
    get:
      tags:
        - User
      summary: Retrieves informations of a specific user
      description: Retrieves informations of a specific user
      operationId: getUserInformation
      parameters:
        - name: userID
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      security:
        - bearer: []

  /v1/managers/auth:
    post:
      tags:
        - Manager
      summary: Ask for an Access token for authentication as manager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          $ref: '#/components/responses/JwtResponse'
        '400':
          description: The given password or username is blank, empty or null. Also if the password does not correspond to the templates.
        '401':
          description: Invalid login or password given
        '404':
          description: The login is not registered
  /v1/managers:
    post:
      tags:
        - Manager
      summary: Create another manager for the Akcess server
      security:
        - bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Manager'
      responses:
        '200':
          description: OK
        '401':
          description: Invalid credential given
        '403':
          description: Wrong rights to do this operation
  /v1/managers/{managerId}:
    delete:
      tags:
        - Manager
      summary: Delete a manager from the Akcess server
      security:
        - bearer: []
      parameters:
        - name: managerId
          in: path
          description: ID of role to return
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Manager has been deleted successfully
        '403':
          description: Wrong rights to do this operation
        '404':
          description: The given manager does not exists by the given ID

  /v1/infos:
    get:
      tags:
        - info
      summary: Get all the global informations about this Akcess server
      description: Get all the global informations about this Akcess server such as known vulnerabilities, version number
      operationId: version
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/API_Info'

      security:
        - bearer: []
  /v1/roles/{roleId}:
    patch:
      tags:
        - Role
      summary: Update an existing role
      description: Returns informations of a role
      operationId: updateRole
      parameters:
        - name: roleId
          in: path
          description: ID of role to patch
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: update an existent role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LightRole'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LightRole'
        '400':
          description: the application Id or the role Id is incorrect
        '404':
          description: the application Id or the role Id is not found
      security:
        - bearer: []
    delete:
      tags:
        - Role
      summary: Delete a role from an application
      description: Delete a role by its Id from an application from the given's ID
      parameters:
        - name: roleId
          in: path
          description: ID of the role
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: the role has been deleted successfully
        '404':
          description: The role or the application does not exists
      security:
        - bearer: []
  /v1/roles/applications/{applicationId}:
    get:
      tags:
        - Role
      summary: Get all the registered application's roles
      description: Get all the roles from an application
      operationId: listRole
      parameters:
        - name: applicationId
          in: path
          description: ID of the application we wish the roles of
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The role has successfully been retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '404':
          description: The role does not exists
      security:
        - bearer: []
    post:
      tags:
        - Role
      summary: Add a new role for an existing application
      description: Creates a new role giving the role name and the application target Id
      operationId: addRole
      parameters:
        - name: applicationId
          in: path
          description: ID of the application we wish the roles of
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Creates a new role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role_patch'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: the application Id is incorrect
      security:
        - bearer: []

components:
  responses:
    JwtResponse:
      description: Jwt token succesfully generated
      content:
        application/json:
          example:
            token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
  schemas:
    Application_post:
      description: Representation of an application with its idempotency key.
      type: object
      properties:
        idempotencyKey:
          type: integer
          example: 1234
        name:
          type: string
          example: "MyAwesomeApplication"
        url:
          type: string
          example: "http://myAwesomeApplication.com"
    Application_patch:
      description: Very light representation of an application with its minimal informations.
      type: object
      properties:
        name:
          type: string
          example: "MyAwesomeApplication"
        url:
          type: string
          example: "http://myAwesomeApplication.com"
    Application_light:
      description: Light representation of an application with only its Id and its name.
      type: object
      properties:
        applicationId:
          type: integer
          example: "1"
        name:
          type: string
          description: "Name of the application"
          example: "MyAwesomeApplication"
        url:
          type: string
          description: "Url of the applicaton"
          example: "http://myAwesomeApplication.com"
    Application_full:
      type: object
      description: Complete representation of an application, contains its id, its name, its root url, its registered users and all the roles associated by it. Each role of this application is the range that a user can have with it.
      properties:
        id:
          type: integer
          format: int64
          description: "Id of the application"
          example: 10
        name:
          type: string
          description: "Name of the application"
          example: "MyAwesomeApplication"
        root_url:
          type: string
          description: "Url of the application"
          example: "https://myawesomeapplication.com/"
        users:
          description: "Array representing the users who are registered"
          type: array
          items:
            $ref: '#/components/schemas/Credentials'
        roles:
          description: "Array representing the roles created in the application"
          type: array
          items:
            $ref: '#/components/schemas/Role'
    API_Info:
      type: object
      description: Represent all the global informations that has this Akcess instance, usefull to know its version number and vulnerabilities that is known for it.
      properties:
        name:
          type: string
          example: "AKCESS"
          description: "Name of the API"
        version:
          type: string
          example: "9.0.1"
          description: "Current version of the API"
        cve:
          type: array
          description: "Vulnerabilities know for this version"
          items:
            example: ["CVE-2023-45661", "CVE-2023-45623"]
    UserInput:
      type: object
      description: Represent a user to register into the Akcess instance.
      properties:
        username:
          type: string
          description: "name of the user"
          example: Sacane
        credentials:
          description: "Credentials associated to the user"
          $ref: '#/components/schemas/Credentials'
    UserOutput:
      type: object
      description: User representation to share to the outside of the Akcess instance, giving its id, and its username.
      properties:
        userId:
          type: integer
          description: "Id associated to the user"
          example: 10
        username:
          type: string
          description: "Name of the user"
          example: Sacane
    NewUserInput:
      type: object
      description: User data to patch into the Akcess server
      properties:
        newUsername:
          type: string
          description: "new name of the user to represent it into the application (not the login)"
          example: "Van doe"
        newPassword:
          type: string
          description: "new Password to change of the user"
          example: "xx7182hudfzuahdE123&"
    LightRole:
      type: object
      description: "A simple label for a role"
      properties:
        label:
          type: string
          description: "label of the role"
          example: "USER"
    UserTokenRedirection:
      type: object
      description: Represent user by its id, its access token and the url where the user must be redirected to.
      properties:
        userId:
          type: integer
          description: "Id associated to the user"
          example: 1
        access_token:
          type: string
          description: "Access token of the user"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        redirection_url:
          type: string
          description: "Url of the application concerned"
          example: "http://client.myawesomeapplication.com"
    Role:
      type: object
      description: Represent for a given application the range of the entity's accessibility through this application.
      properties:
        id:
          type: integer
          format: int64
          description: "Id of the role"
          example: 1
        label:
          type: string
          description: "Name of the role"
          example: "functional_admin"
        application_id:
          type: integer
          description: "Id of the application which owns the role"
          format: int64
          example: 2
    Role_patch:
      type: object
      properties:
        label:
          type: string
          example: "functional_admin"
        application_id:
          type: integer
          format: int64
          example: 2
    Manager:
      type: object
      description: Represent an entity that has access to the admin console of the Akcess instance.
      properties:
        username:
          type: string
          description: "Name of the manager"
          example: Sacane
        credentials:
          description: "Credentials of the manager"
          $ref: '#/components/schemas/Credentials'
    Credentials:
      type: object
      description: Represent a couple of login and password entry to connect the user into an application
      properties:
        login:
          type: string
          example: "login"
          description: "login of the entity"
        password:
          type: string
          example: "password"
          description: "password of the entity"
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header